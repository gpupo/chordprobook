#! /usr/bin/env python3


"""Simple script to generate a chort-chart book for a given instrument in HTML"""
import argparse
import os
import pypandoc
from chordprobook.chordprobook import cp_song,  ChordChart, transposer, Instruments, Instrument
import chordprobook.chordprobook as chordprobook

class charter:
    variants = [("", "black"), ("7", "red"), ("m", "blue"),  ("m7", "purple"), ("maj7", "pink"), ("6", "green"), ("sus4", "cadetblue"),("9", "darkorchid"), ("dim", "goldenrod")]

    def page_for_instrument(instrument, name):
        """Single page chart"""
        transposer = chordprobook.transposer()
        page_text = "# %s chords\n\n" % name
        page_text += "<table>"
        #page_text += "<tr>"
        #for variant in variants:
        #    page_text += "<td style='text-align:center'>%s</td>" % variant
        #page_text += "</tr>\n"
        for note_index  in range(0,12):
            note =  transposer.get_note(note_index)
            page_text += "<tr>"
            #page_text += "<td>%s</td>" % note
            for (variant, colour) in charter.variants:
                chord_name = note + variant
                chord_name = instrument.chart.normalise_chord_name(chord_name)
                if chord_name in instrument.chart.grids:
                    chord = instrument.chart.grids[chord_name]
                    page_text += "<td style='text-align:center;text-color: %s id='%s'>" % (colour, chord_name)
                    page_text += chord.voicings[0].to_md()
                    page_text += "<br />" + chord_name
                    page_text += "</td>"
            page_text += "</tr>\n"
        output_file = "%s-chords.html" % name.replace(" ","") 
        pypandoc.convert(page_text, "html", format="md", outputfile=output_file)
        print("Created %s" % output_file)


    def book_for_instrument(instrument, name):
        transposer = chordprobook.transposer()
        page_text = "# %s chords\n\n" % name
        variants = [("", "black"), ("7", "red"), ("m", "blue"),  ("m7", "purple"), ("maj7", "pink"), ("6", "green"), ("sus4", "cadetblue"),("9", "darkorchid"), ("dim", "goldenrod")]

        for note_index  in range(0,12):
            note =  transposer.get_note(note_index)
            for (variant, colour) in charter.variants:
                chord_name = note + variant
                chord_name = instrument.chart.normalise_chord_name(chord_name)
                if chord_name in  instrument.chart.grids:
                    chord = instrument.chart.grids[chord_name]
                    #page_text += "\n\n## %s\n\n" % chord_name
                    for voicing in chord.voicings:
                        page_text += "<div style='float: left; text-align:center; color: %s ' id='%s'>" % (colour, chord_name)
                        page_text += voicing.to_md()
                        page_text +=  "<br />" + chord_name
                        page_text += "</div>"
        output_file =  "%s-all-chords.html" % name.replace(" ","")
        pypandoc.convert(page_text, "html", format="md", outputfile=output_file)
        print("Created %s" % output_file)
  

def make_book():
    parser = argparse.ArgumentParser()
    parser.add_argument('files', type=argparse.FileType('r'), nargs="*", default=None, help='List of files')
    parser.add_argument('-a', '--all', action='store_true', help='Print all chords (default is just one)')
    parser.add_argument('-i', '--instrument', default=None, help='Show chord grids for the given instrument. Eg --instrument "Soprano Ukulele"')
    parser.add_argument('--instruments', action='store_true', help='chord grids for the given instrument, then quit use any of the names or aliases listed under AKA')
  

    args = vars(parser.parse_args())
    #Need to be able to pass this into songs now
    instruments = Instruments()
    
    if args["instruments"]:
        instruments.describe()
        exit()
        
    out_dir = "."
    os.makedirs(out_dir, exist_ok=True)
    instrument = None
    
    if args["instrument"] != None:
        instrument = instruments.get_instrument_by_name(args['instrument'])
	
    if instrument:
            instrument.load_chord_chart()
            chart = instrument.chart
            if chart:
                if args['all']:
                    charter.book_for_instrument(instrument, args['instrument'])
                else:
                    charter.page_for_instrument(instrument, args['instrument'])
           
    else:
        print("You need to supply a valid instrumment eg\n   mkchordchart --instrument 'Tenor Guitar'\nTry one of these:\n")
        instruments.describe()
 
            
if __name__ == "__main__":
    make_book()
